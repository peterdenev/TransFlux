Future:
- optimize _changes array
- implement locking with keys with regex
- what about ajax?
- [DONE] in action functions check if someone try to "set" to not self locked resource
- [DONE] StateManager wait for commit must be synch
- what if one function with some lock call another function with other locks (hint: add actionMap.use=['otherFunc',...])
- implement promises
- set lock/stop/wait on same action (hint: actionsMap.lock_type={same:renew/, other:wait})(or multi_call_prio:last/fist/only_last/only_first)


README:
Sync:
//not anymore - emit after emit (depends on EventEmitterImpl) (ex. emit('MyStore.f1'); emit('MyStore.f2') )
- each functions attached on same event ('on'-s funcs) (ex. MyStore.updated, MyStore.updated)
- action functions with (min one) same lock (ex. action1 with locks:['d1','d2'] and action2 with locks:['d2','d3'])

Async:
- each functions attached on diff event ('on'-s funcs) (ex. MyStore.updated, MyStore.city.updated)
- action functions with no locks or all needed free locks (ex. action1 with locks:['d1','d2'] and action2 with locks:['d3','d4'])

